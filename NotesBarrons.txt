Notes for Future Self
Date: March 14, 2025
Project: Barron’s Financial Scraper
Objective: Scrape financial data (market cap, shares outstanding, revenue, net income, cash, liabilities, debt, operating income, EBITDA, free cash flow) from Barron’s for companies like XOM and AAB.TO without using proxies or CAPTCHA solvers.
1. Background and Challenges
Anti-Bot Measures: Barron’s uses DataDome, which employs CAPTCHAs, behavioral analysis, browser fingerprinting, and IP reputation checks. Initial attempts triggered CAPTCHAs and "Access blocked" messages due to bot-like behavior (e.g., fast clicking, predictable navigation).

IP Scrutiny: The user’s IP (202.81.4.154) was flagged for robot activity, requiring manual CAPTCHA solving. The script needed to maintain human-like behavior post-CAPTCHA to avoid blocks.

Dynamic DOM: Financial tabs load dynamically, causing issues with element interactions (e.g., "Node is either not clickable or not an Element").

Browser Stability: The browser occasionally crashed (TargetCloseError), likely due to resource constraints or dynamic content loading.

2. Solution Evolution
Initial Approach: Used basic delays, user-agent rotation, and non-headless mode to reduce CAPTCHA frequency. This was insufficient for Barron’s advanced anti-bot measures.

Enhanced Behavior Simulation: Added mouse movements, scrolling, and clicks, but blocks persisted post-CAPTCHA due to predictable navigation.

Diverse Interactions: Introduced curved mouse movements, hovering, typing, and randomized navigation (shuffled tabs, skipped tabs, revisited tabs). This allowed tab switching without blocks after manual CAPTCHA solving.

Long Delays: Set delays to 15–30 seconds (initial), 20–40 seconds (before tab switches), 30–60 seconds (after clicks), and 60–120 seconds (between companies) to mimic human pace.

Error Handling: Added visibility checks, try-catch blocks, and retry mechanisms to handle dynamic DOM and non-interactable elements.

Session Persistence: Implemented cookie saving/loading to maintain session continuity.

Browser Stability Fixes: Added retry logic for TargetCloseError and browser stability arguments to prevent crashes.

3. Current Working Solution
Behavior Simulation: 
simulateDiverseBehavior: Curved mouse movements, hovering (with retries), typing in search bar, scrolling, and random clicks.

simulateContinuousBehavior: Runs every 15 seconds with random "reading" pauses (10–30 seconds).

Randomized Navigation: Shuffles tab order, skips tabs (20% chance), revisits tabs (30% chance).

Delays: 15–30 seconds (initial), 20–40 seconds (before tab switches), 30–60 seconds (after clicks), 60–120 seconds (between companies).

Error Handling:
Visibility checks and retries for hover actions.

Try-catch blocks for all major sections to handle TargetCloseError.

Retry mechanism in updateFinancials (up to 3 attempts per company).

Session Continuity: Saves and reuses cookies.

Fingerprint Spoofing: Basic spoofing of navigator.webdriver and navigator.platform.

4. Resolved Issues
Hover Warning: Fixed by improving element selection (:not([style*="pointer-events: none"])), adding retries, and waiting for DOM stability.

TargetCloseError: Added target status checks, retry mechanism, and browser stability arguments to prevent crashes.

5. Remaining Issues and Potential Improvements
AAB.TO Data: AAB.TO (small-cap stock) may have missing financial data. Manually verify available fields on Barron’s and adjust field mappings.

Performance: The script is slow (10–15 minutes per company) due to long delays. Experiment with shorter delays (e.g., 15–30 seconds after clicks) while monitoring for blocks.

Advanced Fingerprint Spoofing: Integrate puppeteer-extra-plugin-stealth to evade browser fingerprinting (canvas, WebGL, etc.).

Dynamic Content Handling: Add page.waitForSelector for financial data tables to ensure content is fully loaded before scraping.

IP Management: If CAPTCHAs increase, recommend waiting 24–48 hours or switching networks.

Error Recovery: Enhance retry logic to resume from the last successful tab instead of restarting the entire company.

6. Key Lessons
Behavioral Analysis: Barron’s monitors behavior post-CAPTCHA, requiring continuous, diverse, and randomized interactions.

Delays Are Critical: Long, variable delays are essential to avoid "clicking too fast" flags.

Dynamic DOM: Financial tabs load dynamically, requiring robust error handling and DOM stability checks.

Browser Stability: TargetCloseError can occur due to resource constraints or dynamic content; retries and stability arguments mitigate this.

7. Next Steps
Test for AAB.TO: Confirm the script completes scraping for AAB.TO and handles missing data.

Monitor CAPTCHA Frequency: If CAPTCHAs reappear, add more interactions (e.g., clicking on random links).

Optimize Delays: Test shorter delays to improve performance while avoiding blocks.

Enhance Error Recovery: Implement tab-level retry logic to resume from the last successful tab.

